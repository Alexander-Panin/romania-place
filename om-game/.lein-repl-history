exit
(load-file "./src/clj/om_game/core.clj")
exit
(load-file "./src/clj/om_game/core.clj")
(load-file "./src/clj/om-game/core.clj")
(load-file "src/clj/om-game/core.clj")
(load-file "src/clj/om_game/core.clj")
exit
(load-file "src/clj/om_game/core.clj")
(def a {:a 1})
a
(zipmap a)
dom 
(in-ns 'om-game.core)
dom
(in-ns 'user)
ls
(use 'om.dom)
(require '(om.dom))
om.dom
om/dom
(require '(om.dom :as om))
(require '[om.dom :as om])
om
(require '[om.dom :as dom])
dom
(dom
)
(dom/h2 nil "asdf")
exit
(load-file "src/clj/om_game/core.clj")
(doc use)
exit
(load-file "src/clj/om_game/core.clj")
(doc assoc)
(doc constantly)
#({})
(#({}))
exit
(load-file "src/clj/om_game/core.clj")
exit
(load-file "src/clj/om_game/core.clj")
exit
(load-file "src/clj/om_game/core.clj")
exit
(load-file "src/clj/om_game/core.clj")
(doc rand)
(doc rand-int)
(doc cycle)
(take 5 (cycle [1]))
(take 5 (cycle 1))
(take 5 (cycle [1 2]))
(doc partition-all)
(apply + 1 [ 2 3 4])
(apply + 1 [ 2 3 4] [ 2 3 4])
(apply + 1 (concat [ 2 3 4] [ 2 3 4]))
(apply + 1 (concat [ 2 3 4] [2 3 4]))
(defn foo [] (rand-int 10))
(foo)
(doc iterate)
(doc lazy)
(doc lazy-seq)
(doc times)
(doc time)
(doc dotimes)
(->> [1 2 3] (take 3))
(->> [1 2 3] (take 2))
(->> [1 2 3] (take 2) vec)
(doc max)
exit
ls
(+ 2 2)
(load-file "src/clj/om_game/core.clj")
(/3 5)
(/ 3 5)
(take (/ 3 5) [1 2 3])
(take (/ 13 5) [1 2 3])
(take (/ 13 5) [1 2 3 4])
(take (/ 113 10) (cycle 10))
(take 5 (cycle 10))
(take 5 (repeat 10))
(repeat 3 10)
(repeat (/ 113 10) 10)
(repeat (/ 23 10) 10)
(repeat (/ 33 10) 10)
(repeat (/ 33 10.) 10)
(repeat (/ 33. 10) 10)
(repeat (/ 0 10) 10)
(repeat (/ 1 10) 10)
(repeat (/ 2 10) 10)
(repeat (/ 3 10) 10)
(div 13 54)
(mod 13 5)
(mod 13 10)
(mod 13 qout)
(qout 13 2)
(rem 13 5)
(rem 3 5)
(quot 3 5)
(quot 5 5)
(doc cycle)
(repeat (qout 1 2) 10)
(repeat (quot 1 2) 10)
(cons (rem 113 10) (repeat (quot 113 10) 10))
(sum (cons (rem 113 10) (repeat (quot 113 10) 10)))
(apply + (cons (rem 113 10) (repeat (quot 113 10) 10)))
(cons (rem 113 10) (repeat (quot 113 10) 10))
(def a {})
(assoc a :k 1)
(doc sort-by)
(sort-by :x [{:x 1} {:x 2} {:x 1}])
(concat [ 12 3 4 ] [1 23 4 ])
(cons (rem 113 10) (repeat (quot 113 10) [10 1]))
(cons [(rem 113 10) 1] (repeat (quot 113 10) [10 1]))
(zip [1 2 3] [1 2 3])
(partition [1 2 3] [1 2 3])
(partition [1 2 3])
(doc partition)
(partition 2 [1 2 3])
(partition 2 [1 2 3 4 5])
(interleave [1 2 3])
(doc interleave [1 2 3])
(doc interleave )
(interleave [1 2 3] [ 12 3 ])
(interleave [1 2 3] [ 12 3 4])
(rest [1 2 3])
(partition [1 2 3] [ 12 3 4])
(partition [1 2 3])
(partition 2 [1 2 3])
(map vector [1 2 2] [2 3])
(map vector [1 2 3] [2 3])
(defn foo [[a b]] (+ a b))
(foo [1 2])
(foo [1 2 3])
(foo [1 2 3 5])
(quot 113 10)
(quot 109 10)
(defn bar [a [b c]] (+ a b c))
(bar 1 [2 3])
a
(:a a)
